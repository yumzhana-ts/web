void LocationDecorator::handleCustomLocations(const ServerConfigDataSet &config)
{
    for (std::map<std::string, ADataSet *>::const_iterator it = config.locationDataSets.begin();
         it != config.locationDataSets.end(); ++it)
    {
		std::string dir = it->first + "/";
		std::string path = response->request.path;
		//Logger::debug("üîç [Compare] path: \"" + path + "\"");
		//if(path == "/")
		path = path + "/";
        //if (dir.compare(0, path.size(), path) == 0) 
		if (path.compare(0, dir.size(), dir) == 0) 
		{
			Logger::debug("üîç [Compare] path: \"" + path + "\"");
			Logger::debug("üîç [Compare] dir:  \"" + dir + "\"");
			//Logger::debug("‚úÖ [Compare] path starts with dir ‚úÖ");
            if (LocationConfigDataSet* loc = dynamic_cast<LocationConfigDataSet*>(it->second))
            {
                directory = loc->root;
				if	(loc->client_max_body_size != 0)
					response->request.client_max_body_size = loc->client_max_body_size;
				if (path == "//")
				{
					if (response->request.method == "GET")
					{
						page = config.indexes[0];
						if(config.indexes.size() > 1)
						{
							this->indexes = config.indexes;
							this->page_index = 0;
						}
					}
				}
                else
				{
					page = response->request.path.substr(it->first.size());
					Logger::debug("page" + page);
					/*if (page.empty())
					{
						page = config.indexes[0];
						if(config.indexes.size() > 1)
						{
							this->indexes = config.indexes;
							this->page_index = 0;
						}
					}*/
				}
					
                location = it->first;
                applyLocationRules(loc);
                checkAllowedMethods(loc);
            }
            return;
        }

    }
    handleDefaultLocation(config);
}


  location /cgi-bin {
      root www/scripts/;
      cgi_path /usr/bin/python3 /bin/bash /usr/bin/php-cgi;
      allow_methods GET POST PUT;
      cgi_ext .php .py .sh;
  }