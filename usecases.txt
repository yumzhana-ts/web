Feature: HTTP Server Endpoints

  # ------------------- GET scenarios -------------------
  Scenario: GET existing resource
    Given a resource "/index.html" exists
    When the client sends a GET request for "/index.html"
    Then the server responds with status 200
    And returns the file content

  Scenario: GET non-existing resource
    Given no resource "/missing.html" exists
    When the client sends a GET request for "/missing.html"
    Then the server responds with status 404

  Scenario: GET with invalid query string
    Given a resource "/search" exists
    When the client sends a GET request "/search?query=%ZZ"
    Then the server responds with status 400

  Scenario: GET to restricted file
    Given a resource "/secret.txt" exists but is protected
    When the client sends a GET request for "/secret.txt"
    Then the server responds with status 403

  # ------------------- POST scenarios -------------------
  Scenario: POST form-urlencoded successfully
    Given the client prepares "username=user&password=pass"
    When the client sends a POST request to "/login" with Content-Type application/x-www-form-urlencoded
    Then the server responds with status 200
    And the server stores the submitted data

  Scenario: POST form-urlencoded missing required fields
    Given the client prepares "username=user"
    When the client sends a POST request to "/login" with Content-Type application/x-www-form-urlencoded
    Then the server responds with status 400
    And indicates missing "password" field

  Scenario: POST multipart file upload successfully
    Given the client prepares a file "notes.txt"
    When the client sends a POST request to "/upload-endpoint" with Content-Type multipart/form-data
    Then the server responds with status 200
    And the file is saved to storage

  Scenario: POST multipart file upload with missing file
    Given the client omits the file in the request
    When the client sends a POST request to "/upload-endpoint" with Content-Type multipart/form-data
    Then the server responds with status 400
    And indicates missing file

  Scenario: POST multipart file upload with permission denied
    Given the client prepares a file "secret.pdf" but server cannot write to directory
    When the client sends a POST request to "/upload-endpoint"
    Then the server responds with status 500
    And the file is not saved

  # ------------------- DELETE scenarios -------------------
  Scenario: Successfully delete an existing resource
    Given a resource with ID 1 exists
    When the client sends a DELETE request for resource ID 1
    Then the server responds with status 200
    And the resource is removed from storage

  Scenario: DELETE with non-existing resource ID
    Given no resource with ID 999 exists
    When the client sends a DELETE request for resource ID 999
    Then the server responds with status 404
    And no resource is removed

  Scenario: DELETE with invalid resource ID format
    Given the client prepares a resource ID "abc"
    When the client sends a DELETE request for resource ID "abc"
    Then the server responds with status 400
    And the resource is not removed

  Scenario: DELETE with missing resource ID
    Given the client omits the resource_id field in the request
    When the client sends a DELETE request
    Then the server responds with status 400
    And the resource is not removed

  Scenario: DELETE when file system permission denied
    Given a resource exists but server cannot access its file
    When the client sends a DELETE request for that resource
    Then the server responds with status 500
    And the resource is not removed

  Scenario: Concurrent DELETE requests on same resource
    Given a resource with ID 2 exists
    When two clients send DELETE requests for resource ID 2 at the same time
    Then one request succeeds with status 200
    And the other request responds with status 404 or 409

Feature: CGI Bin Endpoints

  # ------------------- GET via CGI -------------------
  Scenario: CGI GET existing resource
    Given a CGI script "/cgi-bin/show_file" exists
    When the client sends a GET request with query "/cgi-bin/show_file?file=index.html"
    Then the CGI script executes successfully
    And the server responds with status 200
    And returns the file content

  Scenario: CGI GET non-existing resource
    Given no file "missing.html" exists
    When the client sends a GET request "/cgi-bin/show_file?file=missing.html"
    Then the CGI script executes
    And the server responds with status 404

  Scenario: CGI GET with invalid query string
    Given a CGI script "/cgi-bin/search" exists
    When the client sends a GET request "/cgi-bin/search?query=%ZZ"
    Then the CGI script executes
    And the server responds with status 400

  # ------------------- POST via CGI -------------------
  Scenario: CGI POST form-urlencoded successfully
    Given a CGI script "/cgi-bin/login" exists
    And the client prepares "username=user&password=pass"
    When the client sends a POST request to "/cgi-bin/login" with Content-Type application/x-www-form-urlencoded
    Then the CGI script executes successfully
    And the server responds with status 200
    And the data is processed

  Scenario: CGI POST form-urlencoded missing required fields
    Given a CGI script "/cgi-bin/login" exists
    And the client prepares "username=user"
    When the client sends a POST request with Content-Type application/x-www-form-urlencoded
    Then the CGI script executes
    And the server responds with status 400
    And indicates missing "password" field

  Scenario: CGI POST multipart file upload successfully
    Given a CGI script "/cgi-bin/upload" exists
    And the client prepares a file "notes.txt"
    When the client sends a POST request with Content-Type multipart/form-data
    Then the CGI script executes successfully
    And the server responds with status 200
    And the file is saved

  Scenario: CGI POST multipart file upload missing file
    Given a CGI script "/cgi-bin/upload" exists
    And the client omits the file
    When the client sends a POST request with Content-Type multipart/form-data
    Then the CGI script executes
    And the server responds with status 400
    And indicates missing file

  Scenario: CGI POST multipart file upload with permission denied
    Given a CGI script "/cgi-bin/upload" exists
    And the client prepares a file "secret.pdf"
    But the CGI script cannot write to target directory
    When the client sends a POST request with Content-Type multipart/form-data
    Then the CGI script executes
    And the server responds with status 500
    And the file is not saved

Feature: HTTP Server Error Handling

  # ------------------- 2xx Success -------------------
  Scenario: Successful GET request
    Given a resource "/index.html" exists
    When the client sends a GET request for "/index.html"
    Then the server responds with status 200

  Scenario: Successful POST form submission
    Given a form with required fields exists
    When the client sends a POST request with valid data
    Then the server responds with status 201
    And the resource is created

  # ------------------- 3xx Redirection -------------------
  Scenario: Resource moved permanently
    Given a resource "/old-page.html" was moved to "/new-page.html"
    When the client requests "/old-page.html"
    Then the server responds with status 301
    And returns Location header "/new-page.html"

  Scenario: Temporary redirect
    Given a resource "/temp" should redirect to "/home"
    When the client requests "/temp"
    Then the server responds with status 302
    And returns Location header "/home"

  # ------------------- 4xx Client Errors -------------------
  Scenario: Bad Request
    Given the client sends malformed URL-encoded data
    When the server parses the request
    Then the server responds with status 400

  Scenario: Unauthorized access
    Given the resource "/admin" requires authentication
    When the client sends a request without credentials
    Then the server responds with status 401

  Scenario: Forbidden access
    Given the resource "/secret.txt" exists but is restricted
    When the client sends a valid request
    Then the server responds with status 403

  Scenario: Not Found
    Given no resource "/missing.html" exists
    When the client requests "/missing.html"
    Then the server responds with status 404

  Scenario: Method Not Allowed
    Given the resource "/upload-endpoint" only accepts POST
    When the client sends a GET request
    Then the server responds with status 405

  Scenario: Not Acceptable
    Given the client requests a content type not supported
    When the server processes the Accept header
    Then the server responds with status 406

  Scenario: Request Timeout
    Given the client opens a connection but does not send data
    When the server times out
    Then the server responds with status 408

  Scenario: Conflict
    Given the client tries to create a resource that already exists
    When the server detects the conflict
    Then the server responds with status 409

  Scenario: Gone
    Given the resource "/old-page.html" was permanently deleted
    When the client requests "/old-page.html"
    Then the server responds with status 410

  Scenario: Length Required
    Given the server requires Content-Length
    When the client sends POST without Content-Length
    Then the server responds with status 411

  Scenario: Payload Too Large
    Given the client sends a body exceeding max size
    When the server checks Content-Length
    Then the server responds with status 413

  Scenario: URI Too Long
    Given the client requests a URL exceeding max length
    When the server parses the request line
    Then the server responds with status 414

  Scenario: Unsupported Media Type
    Given the client sends a POST with unsupported Content-Type
    When the server parses the headers
    Then the server responds with status 415

  Scenario: Range Not Satisfiable
    Given the client requests bytes beyond file size
    When the server processes Range header
    Then the server responds with status 416

  Scenario: Expectation Failed
    Given the client sends Expect header that cannot be met
    When the server parses the header
    Then the server responds with status 417

  # ------------------- 5xx Server Errors -------------------
  Scenario: Internal Server Error
    Given the server encounters an unexpected condition
    When the request is processed
    Then the server responds with status 500

  Scenario: Not Implemented
    Given the client uses an HTTP method not supported
    When the server parses the request
    Then the server responds with status 501

  Scenario: Bad Gateway
    Given the server is acting as a gateway/proxy and receives invalid response
    When processing the upstream response
    Then the server responds with status 502

  Scenario: Service Unavailable
    Given the server is temporarily overloaded or down for maintenance
    When a client sends a request
    Then the server responds with status 503

  Scenario: Gateway Timeout
    Given the server is acting as a proxy and upstream does not respond
    When processing the request
    Then the server responds with status 504

  Scenario: HTTP Version Not Supported
    Given the client uses an unsupported HTTP version
    When the server parses the request line
    Then the server responds with status 505
